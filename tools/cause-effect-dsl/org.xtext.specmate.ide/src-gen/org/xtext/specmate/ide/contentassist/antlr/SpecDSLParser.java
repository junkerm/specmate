/*
 * generated by Xtext 2.17.1
 */
package org.xtext.specmate.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.specmate.ide.contentassist.antlr.internal.InternalSpecDSLParser;
import org.xtext.specmate.services.SpecDSLGrammarAccess;

public class SpecDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SpecDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SpecDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
			builder.put(grammarAccess.getTreeDefAccess().getAlternatives_3(), "rule__TreeDef__Alternatives_3");
			builder.put(grammarAccess.getDependencyRuleAccess().getAlternatives(), "rule__DependencyRule__Alternatives");
			builder.put(grammarAccess.getDependencyRuleAccess().getRightNodeAlternatives_0_4_0(), "rule__DependencyRule__RightNodeAlternatives_0_4_0");
			builder.put(grammarAccess.getDependencyRuleAccess().getRightNodeAlternatives_1_4_0(), "rule__DependencyRule__RightNodeAlternatives_1_4_0");
			builder.put(grammarAccess.getFreeDependencyRuleAccess().getRightNodeAlternatives_4_0(), "rule__FreeDependencyRule__RightNodeAlternatives_4_0");
			builder.put(grammarAccess.getNodeAccess().getAlternatives(), "rule__Node__Alternatives");
			builder.put(grammarAccess.getNonTreeNodeAccess().getAlternatives(), "rule__NonTreeNode__Alternatives");
			builder.put(grammarAccess.getTreeNodeAccess().getAlternatives_1_0(), "rule__TreeNode__Alternatives_1_0");
			builder.put(grammarAccess.getExplicitNodeAccess().getAlternatives_1(), "rule__ExplicitNode__Alternatives_1");
			builder.put(grammarAccess.getTagAccess().getAlternatives(), "rule__Tag__Alternatives");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getPosDefAccess().getGroup(), "rule__PosDef__Group__0");
			builder.put(grammarAccess.getPOSTagAccess().getGroup(), "rule__POSTag__Group__0");
			builder.put(grammarAccess.getPOSTagAccess().getGroup_1(), "rule__POSTag__Group_1__0");
			builder.put(grammarAccess.getDepDefAccess().getGroup(), "rule__DepDef__Group__0");
			builder.put(grammarAccess.getDepTagAccess().getGroup(), "rule__DepTag__Group__0");
			builder.put(grammarAccess.getDepTagAccess().getGroup_1(), "rule__DepTag__Group_1__0");
			builder.put(grammarAccess.getTreeDefAccess().getGroup(), "rule__TreeDef__Group__0");
			builder.put(grammarAccess.getTreeDefAccess().getGroup_3_0(), "rule__TreeDef__Group_3_0__0");
			builder.put(grammarAccess.getTreeDefAccess().getGroup_3_1(), "rule__TreeDef__Group_3_1__0");
			builder.put(grammarAccess.getTreeDefAccess().getGroup_3_1_1(), "rule__TreeDef__Group_3_1_1__0");
			builder.put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
			builder.put(grammarAccess.getDependencyRuleAccess().getGroup_0(), "rule__DependencyRule__Group_0__0");
			builder.put(grammarAccess.getDependencyRuleAccess().getGroup_1(), "rule__DependencyRule__Group_1__0");
			builder.put(grammarAccess.getFreeDependencyRuleAccess().getGroup(), "rule__FreeDependencyRule__Group__0");
			builder.put(grammarAccess.getOptionNodeAccess().getGroup(), "rule__OptionNode__Group__0");
			builder.put(grammarAccess.getOptionNodeAccess().getGroup_2(), "rule__OptionNode__Group_2__0");
			builder.put(grammarAccess.getTreeNodeAccess().getGroup(), "rule__TreeNode__Group__0");
			builder.put(grammarAccess.getTreeNodeAccess().getGroup_0(), "rule__TreeNode__Group_0__0");
			builder.put(grammarAccess.getTreeNodeAccess().getGroup_1(), "rule__TreeNode__Group_1__0");
			builder.put(grammarAccess.getExplicitNodeAccess().getGroup(), "rule__ExplicitNode__Group__0");
			builder.put(grammarAccess.getExplicitNodeAccess().getGroup_0(), "rule__ExplicitNode__Group_0__0");
			builder.put(grammarAccess.getExplicitNodeAccess().getGroup_1_0(), "rule__ExplicitNode__Group_1_0__0");
			builder.put(grammarAccess.getSubtreeAccess().getGroup(), "rule__Subtree__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup_1(), "rule__QualifiedNameWithWildcard__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
			builder.put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getPosDefAccess().getNameAssignment_3(), "rule__PosDef__NameAssignment_3");
			builder.put(grammarAccess.getPosDefAccess().getTagsAssignment_5(), "rule__PosDef__TagsAssignment_5");
			builder.put(grammarAccess.getPOSTagAccess().getNameAssignment_0(), "rule__POSTag__NameAssignment_0");
			builder.put(grammarAccess.getPOSTagAccess().getTagnameAssignment_1_1(), "rule__POSTag__TagnameAssignment_1_1");
			builder.put(grammarAccess.getDepDefAccess().getNameAssignment_3(), "rule__DepDef__NameAssignment_3");
			builder.put(grammarAccess.getDepDefAccess().getTagsAssignment_5(), "rule__DepDef__TagsAssignment_5");
			builder.put(grammarAccess.getDepTagAccess().getNameAssignment_0(), "rule__DepTag__NameAssignment_0");
			builder.put(grammarAccess.getDepTagAccess().getTagnameAssignment_1_1(), "rule__DepTag__TagnameAssignment_1_1");
			builder.put(grammarAccess.getTreeDefAccess().getTreesAssignment_3_0_1(), "rule__TreeDef__TreesAssignment_3_0_1");
			builder.put(grammarAccess.getTreeDefAccess().getTreesAssignment_3_1_0(), "rule__TreeDef__TreesAssignment_3_1_0");
			builder.put(grammarAccess.getTreeDefAccess().getTreesAssignment_3_1_1_1(), "rule__TreeDef__TreesAssignment_3_1_1_1");
			builder.put(grammarAccess.getTreeTagAccess().getNameAssignment(), "rule__TreeTag__NameAssignment");
			builder.put(grammarAccess.getRuleAccess().getNameAssignment_2(), "rule__Rule__NameAssignment_2");
			builder.put(grammarAccess.getRuleAccess().getDependenciesAssignment_4(), "rule__Rule__DependenciesAssignment_4");
			builder.put(grammarAccess.getDependencyRuleAccess().getLeftNodeAssignment_0_0(), "rule__DependencyRule__LeftNodeAssignment_0_0");
			builder.put(grammarAccess.getDependencyRuleAccess().getDTagAssignment_0_2(), "rule__DependencyRule__DTagAssignment_0_2");
			builder.put(grammarAccess.getDependencyRuleAccess().getRightNodeAssignment_0_4(), "rule__DependencyRule__RightNodeAssignment_0_4");
			builder.put(grammarAccess.getDependencyRuleAccess().getLeftNodeAssignment_1_0(), "rule__DependencyRule__LeftNodeAssignment_1_0");
			builder.put(grammarAccess.getDependencyRuleAccess().getDTagAssignment_1_2(), "rule__DependencyRule__DTagAssignment_1_2");
			builder.put(grammarAccess.getDependencyRuleAccess().getRightNodeAssignment_1_4(), "rule__DependencyRule__RightNodeAssignment_1_4");
			builder.put(grammarAccess.getFreeDependencyRuleAccess().getLeftNodeAssignment_0(), "rule__FreeDependencyRule__LeftNodeAssignment_0");
			builder.put(grammarAccess.getFreeDependencyRuleAccess().getDTagAssignment_2(), "rule__FreeDependencyRule__DTagAssignment_2");
			builder.put(grammarAccess.getFreeDependencyRuleAccess().getRightNodeAssignment_4(), "rule__FreeDependencyRule__RightNodeAssignment_4");
			builder.put(grammarAccess.getOptionNodeAccess().getLeftNodeAssignment_1(), "rule__OptionNode__LeftNodeAssignment_1");
			builder.put(grammarAccess.getOptionNodeAccess().getRightNodesAssignment_2_1(), "rule__OptionNode__RightNodesAssignment_2_1");
			builder.put(grammarAccess.getTreeNodeAccess().getPTagAssignment_0_0(), "rule__TreeNode__PTagAssignment_0_0");
			builder.put(grammarAccess.getTreeNodeAccess().getExprAssignment_1_0_0(), "rule__TreeNode__ExprAssignment_1_0_0");
			builder.put(grammarAccess.getTreeNodeAccess().getAnyMatchAssignment_1_0_1(), "rule__TreeNode__AnyMatchAssignment_1_0_1");
			builder.put(grammarAccess.getTreeNodeAccess().getTreeAssignment_2(), "rule__TreeNode__TreeAssignment_2");
			builder.put(grammarAccess.getExplicitNodeAccess().getPTagAssignment_0_0(), "rule__ExplicitNode__PTagAssignment_0_0");
			builder.put(grammarAccess.getExplicitNodeAccess().getCaseSensitiveAssignment_1_0_0(), "rule__ExplicitNode__CaseSensitiveAssignment_1_0_0");
			builder.put(grammarAccess.getExplicitNodeAccess().getExprAssignment_1_0_1(), "rule__ExplicitNode__ExprAssignment_1_0_1");
			builder.put(grammarAccess.getExplicitNodeAccess().getAnyMatchAssignment_1_1(), "rule__ExplicitNode__AnyMatchAssignment_1_1");
			builder.put(grammarAccess.getSubtreeAccess().getNameAssignment_1(), "rule__Subtree__NameAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SpecDSLGrammarAccess grammarAccess;

	@Override
	protected InternalSpecDSLParser createParser() {
		InternalSpecDSLParser result = new InternalSpecDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SpecDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SpecDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
