/*
 * generated by Xtext 2.17.1
 */
package org.xtext.specmate.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SpecDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=AbstractElement*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=AbstractElement*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_0() { return cElementsAbstractElementParserRuleCall_0; }
	}
	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPosDefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDepDefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTreeDefParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRuleParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//AbstractElement:
		//	Import | PosDef | DepDef | TreeDef | Rule;
		@Override public ParserRule getRule() { return rule; }
		
		//Import | PosDef | DepDef | TreeDef | Rule
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Import
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }
		
		//PosDef
		public RuleCall getPosDefParserRuleCall_1() { return cPosDefParserRuleCall_1; }
		
		//DepDef
		public RuleCall getDepDefParserRuleCall_2() { return cDepDefParserRuleCall_2; }
		
		//TreeDef
		public RuleCall getTreeDefParserRuleCall_3() { return cTreeDefParserRuleCall_3; }
		
		//Rule
		public RuleCall getRuleParserRuleCall_4() { return cRuleParserRuleCall_4; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class PosDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.PosDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTagsetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cPartsOfSpeechKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTagsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTagsPOSTagParserRuleCall_5_0 = (RuleCall)cTagsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//PosDef:
		//	'def' 'tagset' 'parts-of-speech' name=QualifiedName '{' tags+=POSTag* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' 'tagset' 'parts-of-speech' name=QualifiedName '{' tags+=POSTag* '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//'tagset'
		public Keyword getTagsetKeyword_1() { return cTagsetKeyword_1; }
		
		//'parts-of-speech'
		public Keyword getPartsOfSpeechKeyword_2() { return cPartsOfSpeechKeyword_2; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0() { return cNameQualifiedNameParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//tags+=POSTag*
		public Assignment getTagsAssignment_5() { return cTagsAssignment_5; }
		
		//POSTag
		public RuleCall getTagsPOSTagParserRuleCall_5_0() { return cTagsPOSTagParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class POSTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.POSTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTagnameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTagnameSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cTagnameAssignment_1_1.eContents().get(0);
		
		//POSTag:
		//	name=ID ("=" tagname=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ("=" tagname=STRING)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//("=" tagname=STRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//tagname=STRING
		public Assignment getTagnameAssignment_1_1() { return cTagnameAssignment_1_1; }
		
		//STRING
		public RuleCall getTagnameSTRINGTerminalRuleCall_1_1_0() { return cTagnameSTRINGTerminalRuleCall_1_1_0; }
	}
	public class DepDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.DepDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTagsetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDependenciesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameQualifiedNameParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTagsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTagsDepTagParserRuleCall_5_0 = (RuleCall)cTagsAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//DepDef:
		//	'def' 'tagset' 'dependencies' name=QualifiedName '{' tags+=DepTag* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' 'tagset' 'dependencies' name=QualifiedName '{' tags+=DepTag* '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//'tagset'
		public Keyword getTagsetKeyword_1() { return cTagsetKeyword_1; }
		
		//'dependencies'
		public Keyword getDependenciesKeyword_2() { return cDependenciesKeyword_2; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_3_0() { return cNameQualifiedNameParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//tags+=DepTag*
		public Assignment getTagsAssignment_5() { return cTagsAssignment_5; }
		
		//DepTag
		public RuleCall getTagsDepTagParserRuleCall_5_0() { return cTagsDepTagParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class DepTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.DepTag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTagnameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTagnameSTRINGTerminalRuleCall_1_1_0 = (RuleCall)cTagnameAssignment_1_1.eContents().get(0);
		
		//DepTag:
		//	name=ID ("=" tagname=STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ("=" tagname=STRING)?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//("=" tagname=STRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }
		
		//tagname=STRING
		public Assignment getTagnameAssignment_1_1() { return cTagnameAssignment_1_1; }
		
		//STRING
		public RuleCall getTagnameSTRINGTerminalRuleCall_1_1_0() { return cTagnameSTRINGTerminalRuleCall_1_1_0; }
	}
	public class TreeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.TreeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTreeDefAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSubtreesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Group cGroup_3_0 = (Group)cAlternatives_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_0_0 = (Keyword)cGroup_3_0.eContents().get(0);
		private final Assignment cTreesAssignment_3_0_1 = (Assignment)cGroup_3_0.eContents().get(1);
		private final RuleCall cTreesTreeTagParserRuleCall_3_0_1_0 = (RuleCall)cTreesAssignment_3_0_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_0_2 = (Keyword)cGroup_3_0.eContents().get(2);
		private final Group cGroup_3_1 = (Group)cAlternatives_3.eContents().get(1);
		private final Assignment cTreesAssignment_3_1_0 = (Assignment)cGroup_3_1.eContents().get(0);
		private final RuleCall cTreesTreeTagParserRuleCall_3_1_0_0 = (RuleCall)cTreesAssignment_3_1_0.eContents().get(0);
		private final Group cGroup_3_1_1 = (Group)cGroup_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_1_0 = (Keyword)cGroup_3_1_1.eContents().get(0);
		private final Assignment cTreesAssignment_3_1_1_1 = (Assignment)cGroup_3_1_1.eContents().get(1);
		private final RuleCall cTreesTreeTagParserRuleCall_3_1_1_1_0 = (RuleCall)cTreesAssignment_3_1_1_1.eContents().get(0);
		
		//TreeDef:
		//	{TreeDef} 'def' 'subtrees' ('{' trees+=TreeTag* '}' | trees+=TreeTag (',' trees+=TreeTag)*);
		@Override public ParserRule getRule() { return rule; }
		
		//{TreeDef} 'def' 'subtrees' ('{' trees+=TreeTag* '}' | trees+=TreeTag (',' trees+=TreeTag)*)
		public Group getGroup() { return cGroup; }
		
		//{TreeDef}
		public Action getTreeDefAction_0() { return cTreeDefAction_0; }
		
		//'def'
		public Keyword getDefKeyword_1() { return cDefKeyword_1; }
		
		//'subtrees'
		public Keyword getSubtreesKeyword_2() { return cSubtreesKeyword_2; }
		
		//'{' trees+=TreeTag* '}' | trees+=TreeTag (',' trees+=TreeTag)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//'{' trees+=TreeTag* '}'
		public Group getGroup_3_0() { return cGroup_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_0_0() { return cLeftCurlyBracketKeyword_3_0_0; }
		
		//trees+=TreeTag*
		public Assignment getTreesAssignment_3_0_1() { return cTreesAssignment_3_0_1; }
		
		//TreeTag
		public RuleCall getTreesTreeTagParserRuleCall_3_0_1_0() { return cTreesTreeTagParserRuleCall_3_0_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_0_2() { return cRightCurlyBracketKeyword_3_0_2; }
		
		//trees+=TreeTag (',' trees+=TreeTag)*
		public Group getGroup_3_1() { return cGroup_3_1; }
		
		//trees+=TreeTag
		public Assignment getTreesAssignment_3_1_0() { return cTreesAssignment_3_1_0; }
		
		//TreeTag
		public RuleCall getTreesTreeTagParserRuleCall_3_1_0_0() { return cTreesTreeTagParserRuleCall_3_1_0_0; }
		
		//(',' trees+=TreeTag)*
		public Group getGroup_3_1_1() { return cGroup_3_1_1; }
		
		//','
		public Keyword getCommaKeyword_3_1_1_0() { return cCommaKeyword_3_1_1_0; }
		
		//trees+=TreeTag
		public Assignment getTreesAssignment_3_1_1_1() { return cTreesAssignment_3_1_1_1; }
		
		//TreeTag
		public RuleCall getTreesTreeTagParserRuleCall_3_1_1_1_0() { return cTreesTreeTagParserRuleCall_3_1_1_1_0; }
	}
	public class TreeTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.TreeTag");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//TreeTag:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cRuleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDependenciesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDependenciesDependencyRuleParserRuleCall_4_0 = (RuleCall)cDependenciesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Rule:
		//	'def' 'rule' name=ID '{' dependencies+=DependencyRule+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'def' 'rule' name=ID '{' dependencies+=DependencyRule+ '}'
		public Group getGroup() { return cGroup; }
		
		//'def'
		public Keyword getDefKeyword_0() { return cDefKeyword_0; }
		
		//'rule'
		public Keyword getRuleKeyword_1() { return cRuleKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//dependencies+=DependencyRule+
		public Assignment getDependenciesAssignment_4() { return cDependenciesAssignment_4; }
		
		//DependencyRule
		public RuleCall getDependenciesDependencyRuleParserRuleCall_4_0() { return cDependenciesDependencyRuleParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class DependencyRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.DependencyRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cLeftNodeAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cLeftNodeTreeNodeParserRuleCall_0_0_0 = (RuleCall)cLeftNodeAssignment_0_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cDTagAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final CrossReference cDTagDepTagCrossReference_0_2_0 = (CrossReference)cDTagAssignment_0_2.eContents().get(0);
		private final RuleCall cDTagDepTagQualifiedNameParserRuleCall_0_2_0_1 = (RuleCall)cDTagDepTagCrossReference_0_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cRightNodeAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final Alternatives cRightNodeAlternatives_0_4_0 = (Alternatives)cRightNodeAssignment_0_4.eContents().get(0);
		private final RuleCall cRightNodeNodeParserRuleCall_0_4_0_0 = (RuleCall)cRightNodeAlternatives_0_4_0.eContents().get(0);
		private final RuleCall cRightNodeFreeDependencyRuleParserRuleCall_0_4_0_1 = (RuleCall)cRightNodeAlternatives_0_4_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cLeftNodeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLeftNodeNonTreeNodeParserRuleCall_1_0_0 = (RuleCall)cLeftNodeAssignment_1_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cDTagAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cDTagDepTagCrossReference_1_2_0 = (CrossReference)cDTagAssignment_1_2.eContents().get(0);
		private final RuleCall cDTagDepTagQualifiedNameParserRuleCall_1_2_0_1 = (RuleCall)cDTagDepTagCrossReference_1_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRightNodeAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final Alternatives cRightNodeAlternatives_1_4_0 = (Alternatives)cRightNodeAssignment_1_4.eContents().get(0);
		private final RuleCall cRightNodeTreeNodeParserRuleCall_1_4_0_0 = (RuleCall)cRightNodeAlternatives_1_4_0.eContents().get(0);
		private final RuleCall cRightNodeDependencyRuleParserRuleCall_1_4_0_1 = (RuleCall)cRightNodeAlternatives_1_4_0.eContents().get(1);
		
		///*
		//OptionalDependencyRule:
		//	OrDependencyRule |
		//	(optionalRule ?= 'optional' '(' (subrule+= OrDependencyRule)+ ')')
		//;
		//
		//OrDependencyRule:
		//	DependencyRule |
		//	(choiceRule ?= 'choose' ( subrule+= ParDependencyRule ('or' subrule+=ParDependencyRule)+))
		//;
		//
		//ParDependencyRule:
		//	'(' (subrule+= DependencyRule)+ ')'
		//;
		//*/ DependencyRule:
		//	leftNode=TreeNode '-' dTag=[DepTag|QualifiedName] '->' rightNode=(Node | FreeDependencyRule) | leftNode=NonTreeNode
		//	'-' dTag=[DepTag|QualifiedName] '->' rightNode=(TreeNode | DependencyRule);
		@Override public ParserRule getRule() { return rule; }
		
		//leftNode=TreeNode '-' dTag=[DepTag|QualifiedName] '->' rightNode=(Node | FreeDependencyRule) | leftNode=NonTreeNode '-'
		//dTag=[DepTag|QualifiedName] '->' rightNode=(TreeNode | DependencyRule)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//leftNode=TreeNode '-' dTag=[DepTag|QualifiedName] '->' rightNode=(Node | FreeDependencyRule)
		public Group getGroup_0() { return cGroup_0; }
		
		//leftNode=TreeNode
		public Assignment getLeftNodeAssignment_0_0() { return cLeftNodeAssignment_0_0; }
		
		//TreeNode
		public RuleCall getLeftNodeTreeNodeParserRuleCall_0_0_0() { return cLeftNodeTreeNodeParserRuleCall_0_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }
		
		//dTag=[DepTag|QualifiedName]
		public Assignment getDTagAssignment_0_2() { return cDTagAssignment_0_2; }
		
		//[DepTag|QualifiedName]
		public CrossReference getDTagDepTagCrossReference_0_2_0() { return cDTagDepTagCrossReference_0_2_0; }
		
		//QualifiedName
		public RuleCall getDTagDepTagQualifiedNameParserRuleCall_0_2_0_1() { return cDTagDepTagQualifiedNameParserRuleCall_0_2_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_0_3() { return cHyphenMinusGreaterThanSignKeyword_0_3; }
		
		//rightNode=(Node | FreeDependencyRule)
		public Assignment getRightNodeAssignment_0_4() { return cRightNodeAssignment_0_4; }
		
		//(Node | FreeDependencyRule)
		public Alternatives getRightNodeAlternatives_0_4_0() { return cRightNodeAlternatives_0_4_0; }
		
		//Node
		public RuleCall getRightNodeNodeParserRuleCall_0_4_0_0() { return cRightNodeNodeParserRuleCall_0_4_0_0; }
		
		//FreeDependencyRule
		public RuleCall getRightNodeFreeDependencyRuleParserRuleCall_0_4_0_1() { return cRightNodeFreeDependencyRuleParserRuleCall_0_4_0_1; }
		
		//leftNode=NonTreeNode '-' dTag=[DepTag|QualifiedName] '->' rightNode=(TreeNode | DependencyRule)
		public Group getGroup_1() { return cGroup_1; }
		
		//leftNode=NonTreeNode
		public Assignment getLeftNodeAssignment_1_0() { return cLeftNodeAssignment_1_0; }
		
		//NonTreeNode
		public RuleCall getLeftNodeNonTreeNodeParserRuleCall_1_0_0() { return cLeftNodeNonTreeNodeParserRuleCall_1_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//dTag=[DepTag|QualifiedName]
		public Assignment getDTagAssignment_1_2() { return cDTagAssignment_1_2; }
		
		//[DepTag|QualifiedName]
		public CrossReference getDTagDepTagCrossReference_1_2_0() { return cDTagDepTagCrossReference_1_2_0; }
		
		//QualifiedName
		public RuleCall getDTagDepTagQualifiedNameParserRuleCall_1_2_0_1() { return cDTagDepTagQualifiedNameParserRuleCall_1_2_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_3() { return cHyphenMinusGreaterThanSignKeyword_1_3; }
		
		//rightNode=(TreeNode | DependencyRule)
		public Assignment getRightNodeAssignment_1_4() { return cRightNodeAssignment_1_4; }
		
		//(TreeNode | DependencyRule)
		public Alternatives getRightNodeAlternatives_1_4_0() { return cRightNodeAlternatives_1_4_0; }
		
		//TreeNode
		public RuleCall getRightNodeTreeNodeParserRuleCall_1_4_0_0() { return cRightNodeTreeNodeParserRuleCall_1_4_0_0; }
		
		//DependencyRule
		public RuleCall getRightNodeDependencyRuleParserRuleCall_1_4_0_1() { return cRightNodeDependencyRuleParserRuleCall_1_4_0_1; }
	}
	public class FreeDependencyRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.FreeDependencyRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftNodeNodeParserRuleCall_0_0 = (RuleCall)cLeftNodeAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDTagAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDTagDepTagCrossReference_2_0 = (CrossReference)cDTagAssignment_2.eContents().get(0);
		private final RuleCall cDTagDepTagQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cDTagDepTagCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRightNodeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cRightNodeAlternatives_4_0 = (Alternatives)cRightNodeAssignment_4.eContents().get(0);
		private final RuleCall cRightNodeNodeParserRuleCall_4_0_0 = (RuleCall)cRightNodeAlternatives_4_0.eContents().get(0);
		private final RuleCall cRightNodeFreeDependencyRuleParserRuleCall_4_0_1 = (RuleCall)cRightNodeAlternatives_4_0.eContents().get(1);
		
		//FreeDependencyRule DependencyRule:
		//	leftNode=Node '-' dTag=[DepTag|QualifiedName] '->' rightNode=(Node | FreeDependencyRule);
		@Override public ParserRule getRule() { return rule; }
		
		//leftNode=Node '-' dTag=[DepTag|QualifiedName] '->' rightNode=(Node | FreeDependencyRule)
		public Group getGroup() { return cGroup; }
		
		//leftNode=Node
		public Assignment getLeftNodeAssignment_0() { return cLeftNodeAssignment_0; }
		
		//Node
		public RuleCall getLeftNodeNodeParserRuleCall_0_0() { return cLeftNodeNodeParserRuleCall_0_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//dTag=[DepTag|QualifiedName]
		public Assignment getDTagAssignment_2() { return cDTagAssignment_2; }
		
		//[DepTag|QualifiedName]
		public CrossReference getDTagDepTagCrossReference_2_0() { return cDTagDepTagCrossReference_2_0; }
		
		//QualifiedName
		public RuleCall getDTagDepTagQualifiedNameParserRuleCall_2_0_1() { return cDTagDepTagQualifiedNameParserRuleCall_2_0_1; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }
		
		//rightNode=(Node | FreeDependencyRule)
		public Assignment getRightNodeAssignment_4() { return cRightNodeAssignment_4; }
		
		//(Node | FreeDependencyRule)
		public Alternatives getRightNodeAlternatives_4_0() { return cRightNodeAlternatives_4_0; }
		
		//Node
		public RuleCall getRightNodeNodeParserRuleCall_4_0_0() { return cRightNodeNodeParserRuleCall_4_0_0; }
		
		//FreeDependencyRule
		public RuleCall getRightNodeFreeDependencyRuleParserRuleCall_4_0_1() { return cRightNodeFreeDependencyRuleParserRuleCall_4_0_1; }
	}
	public class NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.Node");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExplicitNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTreeNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Node:
		//	ExplicitNode | OptionNode | TreeNode;
		@Override public ParserRule getRule() { return rule; }
		
		//ExplicitNode | OptionNode | TreeNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExplicitNode
		public RuleCall getExplicitNodeParserRuleCall_0() { return cExplicitNodeParserRuleCall_0; }
		
		//OptionNode
		public RuleCall getOptionNodeParserRuleCall_1() { return cOptionNodeParserRuleCall_1; }
		
		//TreeNode
		public RuleCall getTreeNodeParserRuleCall_2() { return cTreeNodeParserRuleCall_2; }
	}
	public class NonTreeNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.NonTreeNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExplicitNodeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOptionNodeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NonTreeNode Node:
		//	ExplicitNode | OptionNode;
		@Override public ParserRule getRule() { return rule; }
		
		//ExplicitNode | OptionNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExplicitNode
		public RuleCall getExplicitNodeParserRuleCall_0() { return cExplicitNodeParserRuleCall_0; }
		
		//OptionNode
		public RuleCall getOptionNodeParserRuleCall_1() { return cOptionNodeParserRuleCall_1; }
	}
	public class OptionNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.OptionNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftNodeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftNodeExplicitNodeParserRuleCall_1_0 = (RuleCall)cLeftNodeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRightNodesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRightNodesExplicitNodeParserRuleCall_2_1_0 = (RuleCall)cRightNodesAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OptionNode:
		//	'(' leftNode=ExplicitNode ('|' rightNodes+=ExplicitNode)+ ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' leftNode=ExplicitNode ('|' rightNodes+=ExplicitNode)+ ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//leftNode=ExplicitNode
		public Assignment getLeftNodeAssignment_1() { return cLeftNodeAssignment_1; }
		
		//ExplicitNode
		public RuleCall getLeftNodeExplicitNodeParserRuleCall_1_0() { return cLeftNodeExplicitNodeParserRuleCall_1_0; }
		
		//('|' rightNodes+=ExplicitNode)+
		public Group getGroup_2() { return cGroup_2; }
		
		//'|'
		public Keyword getVerticalLineKeyword_2_0() { return cVerticalLineKeyword_2_0; }
		
		//rightNodes+=ExplicitNode
		public Assignment getRightNodesAssignment_2_1() { return cRightNodesAssignment_2_1; }
		
		//ExplicitNode
		public RuleCall getRightNodesExplicitNodeParserRuleCall_2_1_0() { return cRightNodesExplicitNodeParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TreeNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.TreeNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPTagAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cPTagPOSTagCrossReference_0_0_0 = (CrossReference)cPTagAssignment_0_0.eContents().get(0);
		private final RuleCall cPTagPOSTagQualifiedNameParserRuleCall_0_0_0_1 = (RuleCall)cPTagPOSTagCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cExprAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cExprSTRINGTerminalRuleCall_1_0_0_0 = (RuleCall)cExprAssignment_1_0_0.eContents().get(0);
		private final Assignment cAnyMatchAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final Keyword cAnyMatchAsteriskKeyword_1_0_1_0 = (Keyword)cAnyMatchAssignment_1_0_1.eContents().get(0);
		private final Keyword cColonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cTreeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTreeSubtreeParserRuleCall_2_0 = (RuleCall)cTreeAssignment_2.eContents().get(0);
		
		//TreeNode:
		//	(pTag=[POSTag|QualifiedName] ':')? ((expr=STRING | anyMatch?='*') ':')? tree=Subtree;
		@Override public ParserRule getRule() { return rule; }
		
		//(pTag=[POSTag|QualifiedName] ':')? ((expr=STRING | anyMatch?='*') ':')? tree=Subtree
		public Group getGroup() { return cGroup; }
		
		//(pTag=[POSTag|QualifiedName] ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//pTag=[POSTag|QualifiedName]
		public Assignment getPTagAssignment_0_0() { return cPTagAssignment_0_0; }
		
		//[POSTag|QualifiedName]
		public CrossReference getPTagPOSTagCrossReference_0_0_0() { return cPTagPOSTagCrossReference_0_0_0; }
		
		//QualifiedName
		public RuleCall getPTagPOSTagQualifiedNameParserRuleCall_0_0_0_1() { return cPTagPOSTagQualifiedNameParserRuleCall_0_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//((expr=STRING | anyMatch?='*') ':')?
		public Group getGroup_1() { return cGroup_1; }
		
		//expr=STRING | anyMatch?='*'
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//expr=STRING
		public Assignment getExprAssignment_1_0_0() { return cExprAssignment_1_0_0; }
		
		//STRING
		public RuleCall getExprSTRINGTerminalRuleCall_1_0_0_0() { return cExprSTRINGTerminalRuleCall_1_0_0_0; }
		
		//anyMatch?='*'
		public Assignment getAnyMatchAssignment_1_0_1() { return cAnyMatchAssignment_1_0_1; }
		
		//'*'
		public Keyword getAnyMatchAsteriskKeyword_1_0_1_0() { return cAnyMatchAsteriskKeyword_1_0_1_0; }
		
		//':'
		public Keyword getColonKeyword_1_1() { return cColonKeyword_1_1; }
		
		//tree=Subtree
		public Assignment getTreeAssignment_2() { return cTreeAssignment_2; }
		
		//Subtree
		public RuleCall getTreeSubtreeParserRuleCall_2_0() { return cTreeSubtreeParserRuleCall_2_0; }
	}
	public class ExplicitNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.ExplicitNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cPTagAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cPTagPOSTagCrossReference_0_0_0 = (CrossReference)cPTagAssignment_0_0.eContents().get(0);
		private final RuleCall cPTagPOSTagQualifiedNameParserRuleCall_0_0_0_1 = (RuleCall)cPTagPOSTagCrossReference_0_0_0.eContents().get(1);
		private final Keyword cColonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cCaseSensitiveAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final Keyword cCaseSensitiveCASEKeyword_1_0_0_0 = (Keyword)cCaseSensitiveAssignment_1_0_0.eContents().get(0);
		private final Assignment cExprAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExprSTRINGTerminalRuleCall_1_0_1_0 = (RuleCall)cExprAssignment_1_0_1.eContents().get(0);
		private final Assignment cAnyMatchAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final Keyword cAnyMatchAsteriskKeyword_1_1_0 = (Keyword)cAnyMatchAssignment_1_1.eContents().get(0);
		
		//ExplicitNode:
		//	(pTag=[POSTag|QualifiedName] ':')? (caseSensitive?='CASE!'? expr=STRING | anyMatch?='*');
		@Override public ParserRule getRule() { return rule; }
		
		//(pTag=[POSTag|QualifiedName] ':')? (caseSensitive?='CASE!'? expr=STRING | anyMatch?='*')
		public Group getGroup() { return cGroup; }
		
		//(pTag=[POSTag|QualifiedName] ':')?
		public Group getGroup_0() { return cGroup_0; }
		
		//pTag=[POSTag|QualifiedName]
		public Assignment getPTagAssignment_0_0() { return cPTagAssignment_0_0; }
		
		//[POSTag|QualifiedName]
		public CrossReference getPTagPOSTagCrossReference_0_0_0() { return cPTagPOSTagCrossReference_0_0_0; }
		
		//QualifiedName
		public RuleCall getPTagPOSTagQualifiedNameParserRuleCall_0_0_0_1() { return cPTagPOSTagQualifiedNameParserRuleCall_0_0_0_1; }
		
		//':'
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }
		
		//caseSensitive?='CASE!'? expr=STRING | anyMatch?='*'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//caseSensitive?='CASE!'? expr=STRING
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//caseSensitive?='CASE!'?
		public Assignment getCaseSensitiveAssignment_1_0_0() { return cCaseSensitiveAssignment_1_0_0; }
		
		//'CASE!'
		public Keyword getCaseSensitiveCASEKeyword_1_0_0_0() { return cCaseSensitiveCASEKeyword_1_0_0_0; }
		
		//expr=STRING
		public Assignment getExprAssignment_1_0_1() { return cExprAssignment_1_0_1; }
		
		//STRING
		public RuleCall getExprSTRINGTerminalRuleCall_1_0_1_0() { return cExprSTRINGTerminalRuleCall_1_0_1_0; }
		
		//anyMatch?='*'
		public Assignment getAnyMatchAssignment_1_1() { return cAnyMatchAssignment_1_1; }
		
		//'*'
		public Keyword getAnyMatchAsteriskKeyword_1_1_0() { return cAnyMatchAsteriskKeyword_1_1_0; }
	}
	public class SubtreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.Subtree");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameTreeTagCrossReference_1_0 = (CrossReference)cNameAssignment_1.eContents().get(0);
		private final RuleCall cNameTreeTagIDTerminalRuleCall_1_0_1 = (RuleCall)cNameTreeTagCrossReference_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Subtree:
		//	'[' name=[TreeTag] ']';
		@Override public ParserRule getRule() { return rule; }
		
		//'[' name=[TreeTag] ']'
		public Group getGroup() { return cGroup; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//name=[TreeTag]
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//[TreeTag]
		public CrossReference getNameTreeTagCrossReference_1_0() { return cNameTreeTagCrossReference_1_0; }
		
		//ID
		public RuleCall getNameTreeTagIDTerminalRuleCall_1_0_1() { return cNameTreeTagIDTerminalRuleCall_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_2() { return cRightSquareBracketKeyword_2; }
	}
	public class TagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.Tag");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPOSTagParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDepTagParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Tag:
		//	POSTag | DepTag;
		@Override public ParserRule getRule() { return rule; }
		
		//POSTag | DepTag
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//POSTag
		public RuleCall getPOSTagParserRuleCall_0() { return cPOSTagParserRuleCall_0; }
		
		//DepTag
		public RuleCall getDepTagParserRuleCall_1() { return cDepTagParserRuleCall_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.specmate.SpecDSL.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ('.' '*')?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName ('.' '*')?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//('.' '*')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}
	
	
	private final ModelElements pModel;
	private final AbstractElementElements pAbstractElement;
	private final ImportElements pImport;
	private final PosDefElements pPosDef;
	private final POSTagElements pPOSTag;
	private final DepDefElements pDepDef;
	private final DepTagElements pDepTag;
	private final TreeDefElements pTreeDef;
	private final TreeTagElements pTreeTag;
	private final RuleElements pRule;
	private final DependencyRuleElements pDependencyRule;
	private final FreeDependencyRuleElements pFreeDependencyRule;
	private final NodeElements pNode;
	private final NonTreeNodeElements pNonTreeNode;
	private final OptionNodeElements pOptionNode;
	private final TreeNodeElements pTreeNode;
	private final ExplicitNodeElements pExplicitNode;
	private final SubtreeElements pSubtree;
	private final TagElements pTag;
	private final QualifiedNameElements pQualifiedName;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SpecDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pImport = new ImportElements();
		this.pPosDef = new PosDefElements();
		this.pPOSTag = new POSTagElements();
		this.pDepDef = new DepDefElements();
		this.pDepTag = new DepTagElements();
		this.pTreeDef = new TreeDefElements();
		this.pTreeTag = new TreeTagElements();
		this.pRule = new RuleElements();
		this.pDependencyRule = new DependencyRuleElements();
		this.pFreeDependencyRule = new FreeDependencyRuleElements();
		this.pNode = new NodeElements();
		this.pNonTreeNode = new NonTreeNodeElements();
		this.pOptionNode = new OptionNodeElements();
		this.pTreeNode = new TreeNodeElements();
		this.pExplicitNode = new ExplicitNodeElements();
		this.pSubtree = new SubtreeElements();
		this.pTag = new TagElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.specmate.SpecDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=AbstractElement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//AbstractElement:
	//	Import | PosDef | DepDef | TreeDef | Rule;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//PosDef:
	//	'def' 'tagset' 'parts-of-speech' name=QualifiedName '{' tags+=POSTag* '}';
	public PosDefElements getPosDefAccess() {
		return pPosDef;
	}
	
	public ParserRule getPosDefRule() {
		return getPosDefAccess().getRule();
	}
	
	//POSTag:
	//	name=ID ("=" tagname=STRING)?;
	public POSTagElements getPOSTagAccess() {
		return pPOSTag;
	}
	
	public ParserRule getPOSTagRule() {
		return getPOSTagAccess().getRule();
	}
	
	//DepDef:
	//	'def' 'tagset' 'dependencies' name=QualifiedName '{' tags+=DepTag* '}';
	public DepDefElements getDepDefAccess() {
		return pDepDef;
	}
	
	public ParserRule getDepDefRule() {
		return getDepDefAccess().getRule();
	}
	
	//DepTag:
	//	name=ID ("=" tagname=STRING)?;
	public DepTagElements getDepTagAccess() {
		return pDepTag;
	}
	
	public ParserRule getDepTagRule() {
		return getDepTagAccess().getRule();
	}
	
	//TreeDef:
	//	{TreeDef} 'def' 'subtrees' ('{' trees+=TreeTag* '}' | trees+=TreeTag (',' trees+=TreeTag)*);
	public TreeDefElements getTreeDefAccess() {
		return pTreeDef;
	}
	
	public ParserRule getTreeDefRule() {
		return getTreeDefAccess().getRule();
	}
	
	//TreeTag:
	//	name=ID;
	public TreeTagElements getTreeTagAccess() {
		return pTreeTag;
	}
	
	public ParserRule getTreeTagRule() {
		return getTreeTagAccess().getRule();
	}
	
	//Rule:
	//	'def' 'rule' name=ID '{' dependencies+=DependencyRule+ '}';
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}
	
	///*
	//OptionalDependencyRule:
	//	OrDependencyRule |
	//	(optionalRule ?= 'optional' '(' (subrule+= OrDependencyRule)+ ')')
	//;
	//
	//OrDependencyRule:
	//	DependencyRule |
	//	(choiceRule ?= 'choose' ( subrule+= ParDependencyRule ('or' subrule+=ParDependencyRule)+))
	//;
	//
	//ParDependencyRule:
	//	'(' (subrule+= DependencyRule)+ ')'
	//;
	//*/ DependencyRule:
	//	leftNode=TreeNode '-' dTag=[DepTag|QualifiedName] '->' rightNode=(Node | FreeDependencyRule) | leftNode=NonTreeNode
	//	'-' dTag=[DepTag|QualifiedName] '->' rightNode=(TreeNode | DependencyRule);
	public DependencyRuleElements getDependencyRuleAccess() {
		return pDependencyRule;
	}
	
	public ParserRule getDependencyRuleRule() {
		return getDependencyRuleAccess().getRule();
	}
	
	//FreeDependencyRule DependencyRule:
	//	leftNode=Node '-' dTag=[DepTag|QualifiedName] '->' rightNode=(Node | FreeDependencyRule);
	public FreeDependencyRuleElements getFreeDependencyRuleAccess() {
		return pFreeDependencyRule;
	}
	
	public ParserRule getFreeDependencyRuleRule() {
		return getFreeDependencyRuleAccess().getRule();
	}
	
	//Node:
	//	ExplicitNode | OptionNode | TreeNode;
	public NodeElements getNodeAccess() {
		return pNode;
	}
	
	public ParserRule getNodeRule() {
		return getNodeAccess().getRule();
	}
	
	//NonTreeNode Node:
	//	ExplicitNode | OptionNode;
	public NonTreeNodeElements getNonTreeNodeAccess() {
		return pNonTreeNode;
	}
	
	public ParserRule getNonTreeNodeRule() {
		return getNonTreeNodeAccess().getRule();
	}
	
	//OptionNode:
	//	'(' leftNode=ExplicitNode ('|' rightNodes+=ExplicitNode)+ ')';
	public OptionNodeElements getOptionNodeAccess() {
		return pOptionNode;
	}
	
	public ParserRule getOptionNodeRule() {
		return getOptionNodeAccess().getRule();
	}
	
	//TreeNode:
	//	(pTag=[POSTag|QualifiedName] ':')? ((expr=STRING | anyMatch?='*') ':')? tree=Subtree;
	public TreeNodeElements getTreeNodeAccess() {
		return pTreeNode;
	}
	
	public ParserRule getTreeNodeRule() {
		return getTreeNodeAccess().getRule();
	}
	
	//ExplicitNode:
	//	(pTag=[POSTag|QualifiedName] ':')? (caseSensitive?='CASE!'? expr=STRING | anyMatch?='*');
	public ExplicitNodeElements getExplicitNodeAccess() {
		return pExplicitNode;
	}
	
	public ParserRule getExplicitNodeRule() {
		return getExplicitNodeAccess().getRule();
	}
	
	//Subtree:
	//	'[' name=[TreeTag] ']';
	public SubtreeElements getSubtreeAccess() {
		return pSubtree;
	}
	
	public ParserRule getSubtreeRule() {
		return getSubtreeAccess().getRule();
	}
	
	//Tag:
	//	POSTag | DepTag;
	public TagElements getTagAccess() {
		return pTag;
	}
	
	public ParserRule getTagRule() {
		return getTagAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName ('.' '*')?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
