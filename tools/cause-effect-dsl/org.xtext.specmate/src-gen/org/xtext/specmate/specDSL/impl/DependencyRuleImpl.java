/**
 * generated by Xtext 2.17.1
 */
package org.xtext.specmate.specDSL.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.specmate.specDSL.DepTag;
import org.xtext.specmate.specDSL.DependencyRule;
import org.xtext.specmate.specDSL.Node;
import org.xtext.specmate.specDSL.SpecDSLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dependency Rule</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.specmate.specDSL.impl.DependencyRuleImpl#getLeftNode <em>Left Node</em>}</li>
 *   <li>{@link org.xtext.specmate.specDSL.impl.DependencyRuleImpl#getDTag <em>DTag</em>}</li>
 *   <li>{@link org.xtext.specmate.specDSL.impl.DependencyRuleImpl#getRightNode <em>Right Node</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DependencyRuleImpl extends MinimalEObjectImpl.Container implements DependencyRule
{
  /**
   * The cached value of the '{@link #getLeftNode() <em>Left Node</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftNode()
   * @generated
   * @ordered
   */
  protected Node leftNode;

  /**
   * The cached value of the '{@link #getDTag() <em>DTag</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDTag()
   * @generated
   * @ordered
   */
  protected DepTag dTag;

  /**
   * The cached value of the '{@link #getRightNode() <em>Right Node</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightNode()
   * @generated
   * @ordered
   */
  protected EObject rightNode;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DependencyRuleImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SpecDSLPackage.Literals.DEPENDENCY_RULE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Node getLeftNode()
  {
    return leftNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeftNode(Node newLeftNode, NotificationChain msgs)
  {
    Node oldLeftNode = leftNode;
    leftNode = newLeftNode;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SpecDSLPackage.DEPENDENCY_RULE__LEFT_NODE, oldLeftNode, newLeftNode);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeftNode(Node newLeftNode)
  {
    if (newLeftNode != leftNode)
    {
      NotificationChain msgs = null;
      if (leftNode != null)
        msgs = ((InternalEObject)leftNode).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SpecDSLPackage.DEPENDENCY_RULE__LEFT_NODE, null, msgs);
      if (newLeftNode != null)
        msgs = ((InternalEObject)newLeftNode).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SpecDSLPackage.DEPENDENCY_RULE__LEFT_NODE, null, msgs);
      msgs = basicSetLeftNode(newLeftNode, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpecDSLPackage.DEPENDENCY_RULE__LEFT_NODE, newLeftNode, newLeftNode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DepTag getDTag()
  {
    if (dTag != null && dTag.eIsProxy())
    {
      InternalEObject oldDTag = (InternalEObject)dTag;
      dTag = (DepTag)eResolveProxy(oldDTag);
      if (dTag != oldDTag)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SpecDSLPackage.DEPENDENCY_RULE__DTAG, oldDTag, dTag));
      }
    }
    return dTag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DepTag basicGetDTag()
  {
    return dTag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDTag(DepTag newDTag)
  {
    DepTag oldDTag = dTag;
    dTag = newDTag;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpecDSLPackage.DEPENDENCY_RULE__DTAG, oldDTag, dTag));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EObject getRightNode()
  {
    return rightNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRightNode(EObject newRightNode, NotificationChain msgs)
  {
    EObject oldRightNode = rightNode;
    rightNode = newRightNode;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SpecDSLPackage.DEPENDENCY_RULE__RIGHT_NODE, oldRightNode, newRightNode);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRightNode(EObject newRightNode)
  {
    if (newRightNode != rightNode)
    {
      NotificationChain msgs = null;
      if (rightNode != null)
        msgs = ((InternalEObject)rightNode).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SpecDSLPackage.DEPENDENCY_RULE__RIGHT_NODE, null, msgs);
      if (newRightNode != null)
        msgs = ((InternalEObject)newRightNode).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SpecDSLPackage.DEPENDENCY_RULE__RIGHT_NODE, null, msgs);
      msgs = basicSetRightNode(newRightNode, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SpecDSLPackage.DEPENDENCY_RULE__RIGHT_NODE, newRightNode, newRightNode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SpecDSLPackage.DEPENDENCY_RULE__LEFT_NODE:
        return basicSetLeftNode(null, msgs);
      case SpecDSLPackage.DEPENDENCY_RULE__RIGHT_NODE:
        return basicSetRightNode(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SpecDSLPackage.DEPENDENCY_RULE__LEFT_NODE:
        return getLeftNode();
      case SpecDSLPackage.DEPENDENCY_RULE__DTAG:
        if (resolve) return getDTag();
        return basicGetDTag();
      case SpecDSLPackage.DEPENDENCY_RULE__RIGHT_NODE:
        return getRightNode();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SpecDSLPackage.DEPENDENCY_RULE__LEFT_NODE:
        setLeftNode((Node)newValue);
        return;
      case SpecDSLPackage.DEPENDENCY_RULE__DTAG:
        setDTag((DepTag)newValue);
        return;
      case SpecDSLPackage.DEPENDENCY_RULE__RIGHT_NODE:
        setRightNode((EObject)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SpecDSLPackage.DEPENDENCY_RULE__LEFT_NODE:
        setLeftNode((Node)null);
        return;
      case SpecDSLPackage.DEPENDENCY_RULE__DTAG:
        setDTag((DepTag)null);
        return;
      case SpecDSLPackage.DEPENDENCY_RULE__RIGHT_NODE:
        setRightNode((EObject)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SpecDSLPackage.DEPENDENCY_RULE__LEFT_NODE:
        return leftNode != null;
      case SpecDSLPackage.DEPENDENCY_RULE__DTAG:
        return dTag != null;
      case SpecDSLPackage.DEPENDENCY_RULE__RIGHT_NODE:
        return rightNode != null;
    }
    return super.eIsSet(featureID);
  }

} //DependencyRuleImpl
