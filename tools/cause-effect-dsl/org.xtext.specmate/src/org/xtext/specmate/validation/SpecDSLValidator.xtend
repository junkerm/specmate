/*
 * generated by Xtext 2.17.1
 */
package org.xtext.specmate.validation

import org.eclipse.xtext.validation.Check
import org.xtext.specmate.specDSL.Rule
import org.xtext.specmate.resolve.util.RuleUtility
import java.util.Stack
import org.xtext.specmate.resolve.matcher.Matcher
import org.xtext.specmate.resolve.matcher.SubtreeMatcher
import org.xtext.specmate.specDSL.SpecDSLPackage
import org.xtext.specmate.resolve.matcher.MatcherException

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SpecDSLValidator extends AbstractSpecDSLValidator {
	
	@Check
	def checkRule(Rule rule) {
		try {
			var match = RuleUtility.transform(rule);
			var workStack = new Stack<Matcher>();
			workStack.add(match);
			while(!workStack.isEmpty) {
				var currentMatch = workStack.pop;
				if(currentMatch.hasChildren) {
					if (!(currentMatch instanceof SubtreeMatcher) && currentMatch.parent!== null) {
						// warning("Inner Nodes should probably be a subtree", SpecDSLPackage.Literals.RULE__DEPENDENCIES);
					}
					for(Matcher m: currentMatch.childMatchers) {
						workStack.push(m);
					}
					
				}
			}
		} catch(MatcherException e) {
			error(e.message, SpecDSLPackage.Literals.RULE__DEPENDENCIES);
		}
	}
	
}
