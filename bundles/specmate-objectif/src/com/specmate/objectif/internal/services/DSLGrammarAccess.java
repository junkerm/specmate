/*
 * generated by Xtext 2.17.1
 */
package com.specmate.objectif.internal.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DSLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.specmate.objectif.DSL.Model");
		private final Assignment cRulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRulesBusinessRuleParserRuleCall_0 = (RuleCall)cRulesAssignment.eContents().get(0);
		
		//Model:
		//	rules+=BusinessRule*;
		@Override public ParserRule getRule() { return rule; }
		
		//rules+=BusinessRule*
		public Assignment getRulesAssignment() { return cRulesAssignment; }
		
		//BusinessRule
		public RuleCall getRulesBusinessRuleParserRuleCall_0() { return cRulesBusinessRuleParserRuleCall_0; }
	}
	public class BusinessRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.specmate.objectif.DSL.BusinessRule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWENNKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCauseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCauseOR_NodeParserRuleCall_1_0 = (RuleCall)cCauseAssignment_1.eContents().get(0);
		private final Keyword cDANNKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEffectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cEffectAlternatives_3_0 = (Alternatives)cEffectAssignment_3.eContents().get(0);
		private final RuleCall cEffectBusinessRuleParserRuleCall_3_0_0 = (RuleCall)cEffectAlternatives_3_0.eContents().get(0);
		private final RuleCall cEffectOR_NodeParserRuleCall_3_0_1 = (RuleCall)cEffectAlternatives_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSONSTKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAlternativeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Alternatives cAlternativeAlternatives_4_1_0 = (Alternatives)cAlternativeAssignment_4_1.eContents().get(0);
		private final RuleCall cAlternativeBusinessRuleParserRuleCall_4_1_0_0 = (RuleCall)cAlternativeAlternatives_4_1_0.eContents().get(0);
		private final RuleCall cAlternativeOR_NodeParserRuleCall_4_1_0_1 = (RuleCall)cAlternativeAlternatives_4_1_0.eContents().get(1);
		private final Keyword cENDEWENNKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//BusinessRule:
		//	'WENN' cause=OR_Node "DANN" effect=(BusinessRule | OR_Node) ("SONST" alternative=(BusinessRule | OR_Node))?
		//	"ENDE-WENN";
		@Override public ParserRule getRule() { return rule; }
		
		//'WENN' cause=OR_Node "DANN" effect=(BusinessRule | OR_Node) ("SONST" alternative=(BusinessRule | OR_Node))? "ENDE-WENN"
		public Group getGroup() { return cGroup; }
		
		//'WENN'
		public Keyword getWENNKeyword_0() { return cWENNKeyword_0; }
		
		//cause=OR_Node
		public Assignment getCauseAssignment_1() { return cCauseAssignment_1; }
		
		//OR_Node
		public RuleCall getCauseOR_NodeParserRuleCall_1_0() { return cCauseOR_NodeParserRuleCall_1_0; }
		
		//"DANN"
		public Keyword getDANNKeyword_2() { return cDANNKeyword_2; }
		
		//effect=(BusinessRule | OR_Node)
		public Assignment getEffectAssignment_3() { return cEffectAssignment_3; }
		
		//(BusinessRule | OR_Node)
		public Alternatives getEffectAlternatives_3_0() { return cEffectAlternatives_3_0; }
		
		//BusinessRule
		public RuleCall getEffectBusinessRuleParserRuleCall_3_0_0() { return cEffectBusinessRuleParserRuleCall_3_0_0; }
		
		//OR_Node
		public RuleCall getEffectOR_NodeParserRuleCall_3_0_1() { return cEffectOR_NodeParserRuleCall_3_0_1; }
		
		//("SONST" alternative=(BusinessRule | OR_Node))?
		public Group getGroup_4() { return cGroup_4; }
		
		//"SONST"
		public Keyword getSONSTKeyword_4_0() { return cSONSTKeyword_4_0; }
		
		//alternative=(BusinessRule | OR_Node)
		public Assignment getAlternativeAssignment_4_1() { return cAlternativeAssignment_4_1; }
		
		//(BusinessRule | OR_Node)
		public Alternatives getAlternativeAlternatives_4_1_0() { return cAlternativeAlternatives_4_1_0; }
		
		//BusinessRule
		public RuleCall getAlternativeBusinessRuleParserRuleCall_4_1_0_0() { return cAlternativeBusinessRuleParserRuleCall_4_1_0_0; }
		
		//OR_Node
		public RuleCall getAlternativeOR_NodeParserRuleCall_4_1_0_1() { return cAlternativeOR_NodeParserRuleCall_4_1_0_1; }
		
		//"ENDE-WENN"
		public Keyword getENDEWENNKeyword_5() { return cENDEWENNKeyword_5; }
	}
	public class OR_NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.specmate.objectif.DSL.OR_Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeAND_NodeParserRuleCall_0_0 = (RuleCall)cNodeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOrAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cOrODERKeyword_1_0_0 = (Keyword)cOrAssignment_1_0.eContents().get(0);
		private final Assignment cSubNodeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubNodeOR_NodeParserRuleCall_1_1_0 = (RuleCall)cSubNodeAssignment_1_1.eContents().get(0);
		
		//OR_Node:
		//	node=AND_Node (or?="ODER" subNode=OR_Node)?;
		@Override public ParserRule getRule() { return rule; }
		
		//node=AND_Node (or?="ODER" subNode=OR_Node)?
		public Group getGroup() { return cGroup; }
		
		//node=AND_Node
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }
		
		//AND_Node
		public RuleCall getNodeAND_NodeParserRuleCall_0_0() { return cNodeAND_NodeParserRuleCall_0_0; }
		
		//(or?="ODER" subNode=OR_Node)?
		public Group getGroup_1() { return cGroup_1; }
		
		//or?="ODER"
		public Assignment getOrAssignment_1_0() { return cOrAssignment_1_0; }
		
		//"ODER"
		public Keyword getOrODERKeyword_1_0_0() { return cOrODERKeyword_1_0_0; }
		
		//subNode=OR_Node
		public Assignment getSubNodeAssignment_1_1() { return cSubNodeAssignment_1_1; }
		
		//OR_Node
		public RuleCall getSubNodeOR_NodeParserRuleCall_1_1_0() { return cSubNodeOR_NodeParserRuleCall_1_1_0; }
	}
	public class AND_NodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.specmate.objectif.DSL.AND_Node");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNodeLiteralParserRuleCall_0_0 = (RuleCall)cNodeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAndAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cAndUNDKeyword_1_0_0 = (Keyword)cAndAssignment_1_0.eContents().get(0);
		private final Assignment cSubNodeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSubNodeAND_NodeParserRuleCall_1_1_0 = (RuleCall)cSubNodeAssignment_1_1.eContents().get(0);
		
		//AND_Node:
		//	node=Literal (and?="UND" subNode=AND_Node)?;
		@Override public ParserRule getRule() { return rule; }
		
		//node=Literal (and?="UND" subNode=AND_Node)?
		public Group getGroup() { return cGroup; }
		
		//node=Literal
		public Assignment getNodeAssignment_0() { return cNodeAssignment_0; }
		
		//Literal
		public RuleCall getNodeLiteralParserRuleCall_0_0() { return cNodeLiteralParserRuleCall_0_0; }
		
		//(and?="UND" subNode=AND_Node)?
		public Group getGroup_1() { return cGroup_1; }
		
		//and?="UND"
		public Assignment getAndAssignment_1_0() { return cAndAssignment_1_0; }
		
		//"UND"
		public Keyword getAndUNDKeyword_1_0_0() { return cAndUNDKeyword_1_0_0; }
		
		//subNode=AND_Node
		public Assignment getSubNodeAssignment_1_1() { return cSubNodeAssignment_1_1; }
		
		//AND_Node
		public RuleCall getSubNodeAND_NodeParserRuleCall_1_1_0() { return cSubNodeAND_NodeParserRuleCall_1_1_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.specmate.objectif.DSL.Literal");
		private final Assignment cContentAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cContentCHARACTER_SQUENCETerminalRuleCall_0 = (RuleCall)cContentAssignment.eContents().get(0);
		
		//Literal:
		//	content+=CHARACTER_SQUENCE+;
		@Override public ParserRule getRule() { return rule; }
		
		//content+=CHARACTER_SQUENCE+
		public Assignment getContentAssignment() { return cContentAssignment; }
		
		//CHARACTER_SQUENCE
		public RuleCall getContentCHARACTER_SQUENCETerminalRuleCall_0() { return cContentCHARACTER_SQUENCETerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final BusinessRuleElements pBusinessRule;
	private final OR_NodeElements pOR_Node;
	private final AND_NodeElements pAND_Node;
	private final LiteralElements pLiteral;
	private final TerminalRule tCHARACTER_SQUENCE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pBusinessRule = new BusinessRuleElements();
		this.pOR_Node = new OR_NodeElements();
		this.pAND_Node = new AND_NodeElements();
		this.pLiteral = new LiteralElements();
		this.tCHARACTER_SQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.specmate.objectif.DSL.CHARACTER_SQUENCE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.specmate.objectif.DSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	rules+=BusinessRule*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//BusinessRule:
	//	'WENN' cause=OR_Node "DANN" effect=(BusinessRule | OR_Node) ("SONST" alternative=(BusinessRule | OR_Node))?
	//	"ENDE-WENN";
	public BusinessRuleElements getBusinessRuleAccess() {
		return pBusinessRule;
	}
	
	public ParserRule getBusinessRuleRule() {
		return getBusinessRuleAccess().getRule();
	}
	
	//OR_Node:
	//	node=AND_Node (or?="ODER" subNode=OR_Node)?;
	public OR_NodeElements getOR_NodeAccess() {
		return pOR_Node;
	}
	
	public ParserRule getOR_NodeRule() {
		return getOR_NodeAccess().getRule();
	}
	
	//AND_Node:
	//	node=Literal (and?="UND" subNode=AND_Node)?;
	public AND_NodeElements getAND_NodeAccess() {
		return pAND_Node;
	}
	
	public ParserRule getAND_NodeRule() {
		return getAND_NodeAccess().getRule();
	}
	
	//Literal:
	//	content+=CHARACTER_SQUENCE+;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//terminal CHARACTER_SQUENCE:
	//	'a'..'z' | 'A'..'Z' | '_' | '0'..'9' | "=" | "/" | "%" | "#" | "<" | ">" | "|" | "." | "?" | "," | "\"" | "(" | ")"+;
	public TerminalRule getCHARACTER_SQUENCERule() {
		return tCHARACTER_SQUENCE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
