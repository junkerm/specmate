/*
 * generated by Xtext 2.17.1
 */
grammar InternalDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package com.specmate.objectif.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.specmate.objectif.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.specmate.objectif.services.DSLGrammarAccess;

}

@parser::members {

 	private DSLGrammarAccess grammarAccess;

    public InternalDSLParser(TokenStream input, DSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected DSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getRulesBusinessRuleParserRuleCall_0());
			}
			lv_rules_0_0=ruleBusinessRule
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"rules",
					lv_rules_0_0,
					"com.specmate.objectif.DSL.BusinessRule");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleBusinessRule
entryRuleBusinessRule returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBusinessRuleRule()); }
	iv_ruleBusinessRule=ruleBusinessRule
	{ $current=$iv_ruleBusinessRule.current; }
	EOF;

// Rule BusinessRule
ruleBusinessRule returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='WENN'
		{
			newLeafNode(otherlv_0, grammarAccess.getBusinessRuleAccess().getWENNKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBusinessRuleAccess().getCauseOR_NodeParserRuleCall_1_0());
				}
				lv_cause_1_0=ruleOR_Node
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBusinessRuleRule());
					}
					set(
						$current,
						"cause",
						lv_cause_1_0,
						"com.specmate.objectif.DSL.OR_Node");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='DANN'
		{
			newLeafNode(otherlv_2, grammarAccess.getBusinessRuleAccess().getDANNKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBusinessRuleAccess().getEffectBusinessRuleParserRuleCall_3_0_0());
					}
					lv_effect_3_1=ruleBusinessRule
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBusinessRuleRule());
						}
						set(
							$current,
							"effect",
							lv_effect_3_1,
							"com.specmate.objectif.DSL.BusinessRule");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getBusinessRuleAccess().getEffectOR_NodeParserRuleCall_3_0_1());
					}
					lv_effect_3_2=ruleOR_Node
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBusinessRuleRule());
						}
						set(
							$current,
							"effect",
							lv_effect_3_2,
							"com.specmate.objectif.DSL.OR_Node");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		(
			otherlv_4='SONST'
			{
				newLeafNode(otherlv_4, grammarAccess.getBusinessRuleAccess().getSONSTKeyword_4_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getBusinessRuleAccess().getAlternativeBusinessRuleParserRuleCall_4_1_0_0());
						}
						lv_alternative_5_1=ruleBusinessRule
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBusinessRuleRule());
							}
							set(
								$current,
								"alternative",
								lv_alternative_5_1,
								"com.specmate.objectif.DSL.BusinessRule");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getBusinessRuleAccess().getAlternativeOR_NodeParserRuleCall_4_1_0_1());
						}
						lv_alternative_5_2=ruleOR_Node
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getBusinessRuleRule());
							}
							set(
								$current,
								"alternative",
								lv_alternative_5_2,
								"com.specmate.objectif.DSL.OR_Node");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
		otherlv_6='ENDE-WENN'
		{
			newLeafNode(otherlv_6, grammarAccess.getBusinessRuleAccess().getENDEWENNKeyword_5());
		}
	)
;

// Entry rule entryRuleOR_Node
entryRuleOR_Node returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOR_NodeRule()); }
	iv_ruleOR_Node=ruleOR_Node
	{ $current=$iv_ruleOR_Node.current; }
	EOF;

// Rule OR_Node
ruleOR_Node returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getOR_NodeAccess().getNodeAND_NodeParserRuleCall_0_0());
				}
				lv_node_0_0=ruleAND_Node
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOR_NodeRule());
					}
					set(
						$current,
						"node",
						lv_node_0_0,
						"com.specmate.objectif.DSL.AND_Node");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_or_1_0='ODER'
					{
						newLeafNode(lv_or_1_0, grammarAccess.getOR_NodeAccess().getOrODERKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOR_NodeRule());
						}
						setWithLastConsumed($current, "or", true, "ODER");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOR_NodeAccess().getSubNodeOR_NodeParserRuleCall_1_1_0());
					}
					lv_subNode_2_0=ruleOR_Node
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOR_NodeRule());
						}
						set(
							$current,
							"subNode",
							lv_subNode_2_0,
							"com.specmate.objectif.DSL.OR_Node");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleAND_Node
entryRuleAND_Node returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAND_NodeRule()); }
	iv_ruleAND_Node=ruleAND_Node
	{ $current=$iv_ruleAND_Node.current; }
	EOF;

// Rule AND_Node
ruleAND_Node returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAND_NodeAccess().getNodeLiteralParserRuleCall_0_0());
				}
				lv_node_0_0=ruleLiteral
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAND_NodeRule());
					}
					set(
						$current,
						"node",
						lv_node_0_0,
						"com.specmate.objectif.DSL.Literal");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					lv_and_1_0='UND'
					{
						newLeafNode(lv_and_1_0, grammarAccess.getAND_NodeAccess().getAndUNDKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAND_NodeRule());
						}
						setWithLastConsumed($current, "and", true, "UND");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAND_NodeAccess().getSubNodeAND_NodeParserRuleCall_1_1_0());
					}
					lv_subNode_2_0=ruleAND_Node
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAND_NodeRule());
						}
						set(
							$current,
							"subNode",
							lv_subNode_2_0,
							"com.specmate.objectif.DSL.AND_Node");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_content_0_0=RULE_CHARACTER_SQUENCE
			{
				newLeafNode(lv_content_0_0, grammarAccess.getLiteralAccess().getContentCHARACTER_SQUENCETerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLiteralRule());
				}
				addWithLastConsumed(
					$current,
					"content",
					lv_content_0_0,
					"com.specmate.objectif.DSL.CHARACTER_SQUENCE");
			}
		)
	)+
;

RULE_CHARACTER_SQUENCE : ('a'..'z'|'A'..'Z'|'_'|'0'..'9'|'='|'/'|'%'|'#'|'<'|'>'|'|'|'.'|'?'|','|'"'|'('|')')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
