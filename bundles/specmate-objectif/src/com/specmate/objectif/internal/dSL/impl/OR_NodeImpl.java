/**
 * generated by Xtext 2.17.1
 */
package com.specmate.objectif.internal.dSL.impl;

import com.specmate.objectif.internal.dSL.AND_Node;
import com.specmate.objectif.internal.dSL.DSLPackage;
import com.specmate.objectif.internal.dSL.OR_Node;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>OR Node</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.specmate.objectif.dSL.impl.OR_NodeImpl#getNode <em>Node</em>}</li>
 *   <li>{@link com.specmate.objectif.dSL.impl.OR_NodeImpl#isOr <em>Or</em>}</li>
 *   <li>{@link com.specmate.objectif.dSL.impl.OR_NodeImpl#getSubNode <em>Sub Node</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OR_NodeImpl extends MinimalEObjectImpl.Container implements OR_Node
{
  /**
   * The cached value of the '{@link #getNode() <em>Node</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNode()
   * @generated
   * @ordered
   */
  protected AND_Node node;

  /**
   * The default value of the '{@link #isOr() <em>Or</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOr()
   * @generated
   * @ordered
   */
  protected static final boolean OR_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isOr() <em>Or</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isOr()
   * @generated
   * @ordered
   */
  protected boolean or = OR_EDEFAULT;

  /**
   * The cached value of the '{@link #getSubNode() <em>Sub Node</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSubNode()
   * @generated
   * @ordered
   */
  protected OR_Node subNode;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OR_NodeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DSLPackage.Literals.OR_NODE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AND_Node getNode()
  {
    return node;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNode(AND_Node newNode, NotificationChain msgs)
  {
    AND_Node oldNode = node;
    node = newNode;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DSLPackage.OR_NODE__NODE, oldNode, newNode);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNode(AND_Node newNode)
  {
    if (newNode != node)
    {
      NotificationChain msgs = null;
      if (node != null)
        msgs = ((InternalEObject)node).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DSLPackage.OR_NODE__NODE, null, msgs);
      if (newNode != null)
        msgs = ((InternalEObject)newNode).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DSLPackage.OR_NODE__NODE, null, msgs);
      msgs = basicSetNode(newNode, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.OR_NODE__NODE, newNode, newNode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isOr()
  {
    return or;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOr(boolean newOr)
  {
    boolean oldOr = or;
    or = newOr;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.OR_NODE__OR, oldOr, or));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OR_Node getSubNode()
  {
    return subNode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSubNode(OR_Node newSubNode, NotificationChain msgs)
  {
    OR_Node oldSubNode = subNode;
    subNode = newSubNode;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DSLPackage.OR_NODE__SUB_NODE, oldSubNode, newSubNode);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSubNode(OR_Node newSubNode)
  {
    if (newSubNode != subNode)
    {
      NotificationChain msgs = null;
      if (subNode != null)
        msgs = ((InternalEObject)subNode).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DSLPackage.OR_NODE__SUB_NODE, null, msgs);
      if (newSubNode != null)
        msgs = ((InternalEObject)newSubNode).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DSLPackage.OR_NODE__SUB_NODE, null, msgs);
      msgs = basicSetSubNode(newSubNode, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DSLPackage.OR_NODE__SUB_NODE, newSubNode, newSubNode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DSLPackage.OR_NODE__NODE:
        return basicSetNode(null, msgs);
      case DSLPackage.OR_NODE__SUB_NODE:
        return basicSetSubNode(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DSLPackage.OR_NODE__NODE:
        return getNode();
      case DSLPackage.OR_NODE__OR:
        return isOr();
      case DSLPackage.OR_NODE__SUB_NODE:
        return getSubNode();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DSLPackage.OR_NODE__NODE:
        setNode((AND_Node)newValue);
        return;
      case DSLPackage.OR_NODE__OR:
        setOr((Boolean)newValue);
        return;
      case DSLPackage.OR_NODE__SUB_NODE:
        setSubNode((OR_Node)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.OR_NODE__NODE:
        setNode((AND_Node)null);
        return;
      case DSLPackage.OR_NODE__OR:
        setOr(OR_EDEFAULT);
        return;
      case DSLPackage.OR_NODE__SUB_NODE:
        setSubNode((OR_Node)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DSLPackage.OR_NODE__NODE:
        return node != null;
      case DSLPackage.OR_NODE__OR:
        return or != OR_EDEFAULT;
      case DSLPackage.OR_NODE__SUB_NODE:
        return subNode != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (or: ");
    result.append(or);
    result.append(')');
    return result.toString();
  }

} //OR_NodeImpl
